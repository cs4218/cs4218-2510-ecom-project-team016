// This was generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// There was some edits to fix minor issues.
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import Header from "client/src/components/Header";
import { MemoryRouter } from "react-router-dom";
import toast from "react-hot-toast";

const mockSetAuth = jest.fn();
const mockUseAuth = jest.fn();
const mockUseCart = jest.fn();
const mockUseCategory = jest.fn();

jest.mock("react-hot-toast", () => ({
  success: jest.fn(),
}));

jest.mock("client/src/context/auth", () => ({
  useAuth: () => mockUseAuth(),
}));

jest.mock("client/src/context/cart", () => ({
  useCart: () => mockUseCart(),
}));

jest.mock("client/src/hooks/useCategory", () => () => mockUseCategory());

jest.mock("client/src/components/Form/SearchInput", () => () => <div>SearchInput</div>);

describe("Header Component", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  const setup = (authValue = null, cartValue = [], categoriesValue = []) => {
    mockUseAuth.mockReturnValue([authValue, mockSetAuth]);
    mockUseCart.mockReturnValue([cartValue]);
    mockUseCategory.mockReturnValue(categoriesValue);

    render(
      <MemoryRouter>
        <Header />
      </MemoryRouter>
    );
  };

  test("renders links for unauthenticated user", () => {
    setup(null, [], [{ _id: "1", name: "Cat1", slug: "cat1" }]);

    expect(screen.getByText(/Home/i)).toBeInTheDocument();
    expect(screen.getByText(/Register/i)).toBeInTheDocument();
    expect(screen.getByText(/Login/i)).toBeInTheDocument();
    expect(screen.getByText(/All Categories/i)).toBeInTheDocument();
    expect(screen.getByText(/Cat1/i)).toBeInTheDocument();
    expect(screen.getByText("Cart")).toBeInTheDocument();
  });

  test("renders user dropdown when authenticated", () => {
    const user = { name: "John", role: 0 };
    setup({ user }, [], []);

    expect(screen.getByText("John")).toBeInTheDocument();
    expect(screen.queryByText(/Register/i)).not.toBeInTheDocument();
    expect(screen.queryByText(/Login/i)).not.toBeInTheDocument();
  });

  test("renders admin dashboard link if user role is 1", () => {
    const user = { name: "Admin", role: 1 };
    setup({ user }, [], []);

    fireEvent.click(screen.getByText("Admin"));

    const dashboardLink = screen.getByRole("link", { name: /Dashboard/i });

    expect(dashboardLink).toHaveAttribute("href", "/dashboard/admin");
  });

  test("logout clears auth and shows toast", () => {
    const user = { name: "John", role: 0 };
    setup({ user }, [], []);

    fireEvent.click(screen.getByText("John"));
    fireEvent.click(screen.getByText(/Logout/i));

    expect(mockSetAuth).toHaveBeenCalledWith({
      user: null,
      token: "",
    });
    expect(localStorage.getItem("auth")).toBeNull();
    expect(toast.success).toHaveBeenCalledWith("Logout Successfully");
  });

  test("shows correct cart count", () => {
    setup(null, [{ id: 1 }, { id: 2 }], []);

    expect(screen.getByText("Cart")).toBeInTheDocument();
    expect(screen.getByText("2")).toBeInTheDocument();
  });
});
