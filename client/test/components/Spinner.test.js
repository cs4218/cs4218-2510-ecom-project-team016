// This was generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// There was some edits to fix minor issues.
import React from "react";
import { render, screen, act } from "@testing-library/react";
import Spinner from "client/src/components/Spinner";
import { MemoryRouter } from "react-router-dom";

const mockNavigate = jest.fn();

jest.mock("react-router-dom", () => ({
  ...jest.requireActual("react-router-dom"),
  useNavigate: () => mockNavigate,
  useLocation: () => ({ pathname: "/current" }),
}));

describe("Spinner Component", () => {
  const setup = (path) =>
    render(
      <MemoryRouter>
        <Spinner path={path} />
      </MemoryRouter>
    );

  beforeEach(() => {
    jest.useFakeTimers();
    mockNavigate.mockClear();
  });

  afterEach(() => {
    jest.clearAllTimers();
    jest.useRealTimers();
  });

  test("renders countdown correctly", () => {
    act(() => {
      setup("login");
    });
    expect(screen.getByText(/redirecting to you in 3 second/i)).toBeInTheDocument();
  });

  test("counts down and navigates after 3 seconds", () => {
    act(() => {
      setup("login");
    });

    expect(screen.getByText(/redirecting to you in 3 second/i)).toBeInTheDocument();

    // ðŸ‘‡ Each timer tick wrapped in act()
    act(() => {
      jest.advanceTimersByTime(1000);
    });
    expect(screen.getByText(/redirecting to you in 2 second/i)).toBeInTheDocument();

    act(() => {
      jest.advanceTimersByTime(1000);
    });
    expect(screen.getByText(/redirecting to you in 1 second/i)).toBeInTheDocument();

    act(() => {
      jest.advanceTimersByTime(1000);
    });
    expect(mockNavigate).toHaveBeenCalledWith("/login", { state: "/current" });
  });

  test("uses custom path if provided", () => {
    act(() => {
      setup("dashboard");
    });

    act(() => {
      jest.advanceTimersByTime(3000);
    });

    expect(mockNavigate).toHaveBeenCalledWith("/dashboard", { state: "/current" });
  });
});