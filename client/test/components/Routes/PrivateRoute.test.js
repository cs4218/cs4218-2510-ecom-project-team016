// This was generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// Edits were made to fix issues and improve coverage
import React from "react";
import { render, screen, waitFor } from "@testing-library/react";
import { useAuth } from "client/src/context/auth";
import axios from "axios";
import PrivateRoute from "client/src/components/Routes/PrivateRoute.js";
import { Outlet } from "react-router-dom";
import Spinner from "client/src/components/Spinner.js";

// Mock dependencies
jest.mock("axios");

jest.mock('client/src/context/auth', () => ({
    useAuth: jest.fn(() => [null, jest.fn()]) // Mock useAuth hook to return null state and a mock function for setAuth
}));

jest.mock("client/src/components/Spinner.js", () => jest.fn(() => <div data-testid="spinner">Loading...</div>));
jest.mock("react-router-dom", () => ({
  Outlet: jest.fn(() => <div data-testid="outlet">Protected Route</div>),
}));

describe("PrivateRoute", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("renders Spinner when not authenticated", () => {
    // Mock no token
    useAuth.mockReturnValue([{ token: null }, jest.fn()]);

    render(<PrivateRoute />);

    // Spinner should be shown
    expect(screen.getByTestId("spinner")).toBeInTheDocument();
    expect(screen.queryByTestId("outlet")).not.toBeInTheDocument();
  });

  it("renders Outlet when user is authenticated and API returns ok=true", async () => {
    // Mock token in auth
    useAuth.mockReturnValue([{ token: "testtoken" }, jest.fn()]);
    axios.get.mockResolvedValueOnce({ data: { ok: true } });

    render(<PrivateRoute />);

    // Wait for axios to resolve and Outlet to appear
    await waitFor(() => {
      expect(screen.getByTestId("outlet")).toBeInTheDocument();
    });

    // Spinner should not be visible
    expect(screen.queryByTestId("spinner")).not.toBeInTheDocument();
  });

  it("renders Spinner when API returns ok=false", async () => {
    // Mock token but failed auth
    useAuth.mockReturnValue([{ token: "badtoken" }, jest.fn()]);
    axios.get.mockResolvedValueOnce({ data: { ok: false } });

    render(<PrivateRoute />);

    await waitFor(() => {
      expect(screen.getByTestId("spinner")).toBeInTheDocument();
    });

    expect(screen.queryByTestId("outlet")).not.toBeInTheDocument();
  });
});
