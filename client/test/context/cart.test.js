// This was generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// There was some edits to fix minor issues.
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { useCart, CartProvider } from "client/src/context/cart";

const TestComponent = () => {
  const [cart, setCart] = useCart();
  return (
    <div>
      <div data-testid="cart">{JSON.stringify(cart)}</div>
      <button onClick={() => setCart([...cart, { id: 1, name: "Item A" }])}>
        Add Item
      </button>
    </div>
  );
};

const setup = () =>
  render(
    <CartProvider>
      <TestComponent />
    </CartProvider>
  );

beforeEach(() => {
  localStorage.clear();
  jest.spyOn(Storage.prototype, "getItem");
  jest.spyOn(Storage.prototype, "setItem");
});

afterEach(() => {
  jest.restoreAllMocks();
});

describe("CartContext", () => {
  test("initializes with empty cart if localStorage is empty", () => {
    setup();
    const cartDiv = screen.getByTestId("cart");
    expect(cartDiv.textContent).toBe("[]");
  });

  test("loads existing cart from localStorage on mount", () => {
    const mockCart = [{ id: 99, name: "Saved Item" }];
    localStorage.setItem("cart", JSON.stringify(mockCart));

    setup();
    const cartDiv = screen.getByTestId("cart");
    expect(cartDiv.textContent).toBe(JSON.stringify(mockCart));
    expect(localStorage.getItem).toHaveBeenCalledWith("cart");
  });

  test("can update cart state using setCart", async () => {
    setup();
    const button = screen.getByRole("button", { name: /add item/i });
    fireEvent.click(button);

    const cartDiv = await screen.findByTestId("cart");
    expect(cartDiv.textContent).toContain("Item A");
  });
});
