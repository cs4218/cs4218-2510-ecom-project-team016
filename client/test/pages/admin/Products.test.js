// This was initially generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// There were edits to fix issues.
// Products.test.js
import React from "react";
import { render, screen, waitFor } from "@testing-library/react";
import Products from "client/src/pages/Admin/Products";
import axios from "axios";
import toast from "react-hot-toast";
import { MemoryRouter } from "react-router-dom";

jest.mock("axios");
jest.mock("react-hot-toast", () => ({
  success: jest.fn(),
  error: jest.fn(),
}));
jest.mock("client/src/components/Layout", () => ({ children }) => (
  <div>Mocked Layout {children}</div>
));
jest.mock("client/src/components/AdminMenu", () => () => <div>Mocked AdminMenu</div>);


describe("Products component", () => {
  beforeEach(() => {
    jest.resetAllMocks();
  });

  test("renders the base components", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true,
      countTotal: 1,
      products: [
        {
          _id: "1",
          name: "Product One",
          description: "Description One",
          slug: "product-one",
        },
      ],
    } });

    render(
      <MemoryRouter>
        <Products />
      </MemoryRouter>
    );

    await waitFor(() => {
      expect(axios.get).toHaveBeenCalledWith("/api/v1/product/get-product");
      expect(
        screen.getByRole("heading", { name: /All Products List/i })
      ).toBeInTheDocument();
      expect(screen.getByText("Mocked Layout")).toBeInTheDocument();
      expect(screen.getByText("Mocked AdminMenu")).toBeInTheDocument();
    });
  });

  test("fetches and displays products", async () => {
    const mockProducts = [
      {
        _id: "1",
        name: "Product One",
        description: "Description One",
        slug: "product-one",
      },
      {
        _id: "2",
        name: "Product Two",
        description: "Description Two",
        slug: "product-two",
      },
    ];
    axios.get.mockResolvedValueOnce({ data: { products: mockProducts, success: true } });

    render(
      <MemoryRouter>
        <Products />
      </MemoryRouter>
    );

    await waitFor(() => {
      expect(axios.get).toHaveBeenCalledWith("/api/v1/product/get-product");
      expect(screen.getByText("Product One")).toBeInTheDocument();
      expect(screen.getByText("Product Two")).toBeInTheDocument();
      expect(screen.getByText("Description One")).toBeInTheDocument();
      expect(screen.getByText("Description Two")).toBeInTheDocument();
      expect(
        screen.getByRole("link", { name: /Product One/i })
      ).toHaveAttribute("href", "/dashboard/admin/product/product-one");
      expect(
        screen.getByRole("link", { name: /Product Two/i })
      ).toHaveAttribute("href", "/dashboard/admin/product/product-two");
    });

  });

  test("handles API errors gracefully", async () => {
    axios.get.mockRejectedValueOnce(new Error("Network error"));

    render(
      <MemoryRouter>
        <Products />
      </MemoryRouter>
    );

    await waitFor(() => {
      expect(toast.error).toHaveBeenCalledWith("Something Went Wrong");
    });
  });

  test("shows error toast on unsuccessful API response", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: false, message: "Failed to fetch" } });

    render(
      <MemoryRouter>
        <Products />
      </MemoryRouter>
    );

    await waitFor(() => {
      expect(toast.error).toHaveBeenCalledWith("Failed to fetch");
    });
  });
});
