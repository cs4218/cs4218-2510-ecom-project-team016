// This was initially generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// There was edits to fix issues.
import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import CreateProduct from "client/src/pages/admin/CreateProduct";
import axios from "axios";
import toast from "react-hot-toast";
import { useNavigate } from "react-router-dom";
import userEvent from "@testing-library/user-event";

// ðŸ”¹ Mock dependencies
jest.mock("axios");
jest.mock("react-hot-toast", () => ({
  success: jest.fn(),
  error: jest.fn(),
}));
jest.mock("react-router-dom", () => ({
  ...jest.requireActual("react-router-dom"),
  useNavigate: jest.fn(),
}));
jest.mock("client/src/components/Layout", () => ({ children }) => (
  <div>Mocked Layout {children}</div>
));
jest.mock("client/src/components/AdminMenu", () => () => <div>Mocked AdminMenu</div>);

describe("CreateProduct", () => {
  let mockNavigate;
  beforeEach(() => {
    jest.clearAllMocks();
    mockNavigate = jest.fn();
    useNavigate.mockReturnValue(mockNavigate);
    window.URL.createObjectURL = jest.fn(() => "mocked-url");
  });

  test("renders heading and base UI", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true, category: [] } });
    render(<CreateProduct />);
    await waitFor(() => {
        expect(screen.getByText("Create Product")).toBeInTheDocument();
        expect(screen.getByText(/Mocked Layout/i)).toBeInTheDocument();
        expect(screen.getByText(/Mocked AdminMenu/i)).toBeInTheDocument();
    });
  });

  test("renders form fields", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true, category: [] } });
    render(<CreateProduct />);
    await waitFor(() => {
      expect(screen.getByText(/Select a category/i)).toBeInTheDocument();
      expect(screen.getByText(/Upload Photo/i)).toBeInTheDocument();
    expect(screen.getByPlaceholderText(/write a name/i)).toBeInTheDocument();
    expect(
      screen.getByPlaceholderText(/write a description/i)
    ).toBeInTheDocument();
    expect(screen.getByPlaceholderText(/write a price/i)).toBeInTheDocument();
    expect(screen.getByPlaceholderText(/write a quantity/i)).toBeInTheDocument();
    expect(screen.getByText(/Select Shipping/i)).toBeInTheDocument();
    expect(screen.getByRole("button", { name: /CREATE PRODUCT/i })).toBeInTheDocument();
    });
  });

  test("renders categories properly", async () => {
    axios.get.mockResolvedValueOnce({
      data: { 
        success: true,
        category: [{ _id: "1", name: "Electronics" },
                   { _id: "2", name: "Books" }] 
     },
    });

    render(<CreateProduct />);

    fireEvent.mouseDown(screen.getByText(/Select a category/i));

    await waitFor(() => {
      expect(screen.getByText("Electronics")).toBeInTheDocument();
      expect(screen.getByText("Books")).toBeInTheDocument();
    });
  });

  test("shows error toast if category fetch has an error", async () => {
    axios.get.mockRejectedValueOnce(new Error("Network error"));

    render(<CreateProduct />);

    await waitFor(() =>
      expect(toast.error).toHaveBeenCalledWith(
        "Something went wrong in getting categories"
      )
    );
  });

  test("shows error toast if category fetch is unsuccessful", async () => {
    axios.get.mockResolvedValueOnce({
      data: { success: false },
    });

    render(<CreateProduct />);

    await waitFor(() =>
      expect(toast.error).toHaveBeenCalledWith(
        "Something went wrong in getting categories"
      )
    );
  });

  test("submits product successfully", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true, category: [] } });
    axios.post.mockResolvedValueOnce({ data: { success: true } });

    render(<CreateProduct />);

    fireEvent.change(screen.getByPlaceholderText(/write a name/i), {
      target: { value: "Laptop" },
    });
    fireEvent.change(screen.getByPlaceholderText(/write a description/i), {
      target: { value: "A powerful laptop" },
    });
    fireEvent.change(screen.getByPlaceholderText(/write a Price/i), {
      target: { value: "1500" },
    });
    fireEvent.change(screen.getByPlaceholderText(/write a quantity/i), {
      target: { value: "5" },
    });

    fireEvent.click(screen.getByRole("button", { name: /CREATE PRODUCT/i }));

    await waitFor(() => {
      expect(toast.success).toHaveBeenCalledWith(
        "Product Created Successfully"
      );
      expect(mockNavigate).toHaveBeenCalledWith(
        "/dashboard/admin/products"
      );
    });
  });

  test("submit product shows error toast if API error", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true, category: [] } });
    axios.post.mockRejectedValueOnce(new Error("Network error"));

    render(<CreateProduct />);

    fireEvent.click(screen.getByRole("button", { name: /CREATE PRODUCT/i }));

    await waitFor(() =>
      expect(toast.error).toHaveBeenCalledWith("Something went wrong")
    );
  });

  test("submit product shows error toast if unsuccessful response", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true, category: [] } });
    axios.post.mockResolvedValueOnce({
      data: { success: false, message: "Failed creation" },
    });

    render(<CreateProduct />);

    fireEvent.click(screen.getByRole("button", { name: /CREATE PRODUCT/i }));

    await waitFor(() =>
      expect(toast.error).toHaveBeenCalledWith("Failed creation")
    );
  });

  test("change category reflects properly", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true, category: [{ _id: "1", name: "Electronics" }] } });
    axios.post.mockRejectedValueOnce(new Error("Network error"));

    render(<CreateProduct />);

    fireEvent.mouseDown(screen.getByText(/Select a category/i));

    await waitFor(() => screen.getByText("Electronics"));

    fireEvent.click(screen.getByText("Electronics"));
    
    await waitFor(() => {
      expect(screen.getAllByText("Electronics")[0]).toBeInTheDocument();
      expect(screen.queryByText(/Select a category/i)).not.toBeInTheDocument();
    });
  });

  test("upload photo input works", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true, category: [] } });
    render(<CreateProduct />);

    const input = screen.getByLabelText(/upload photo/i, { selector: "input" });
    const file = new File(["hello"], "test.png", { type: "image/png" });
    await waitFor(() => userEvent.upload(input, file));

    await waitFor(() => {
      expect(screen.getByLabelText("test.png")).toBeInTheDocument();
    });
  });

  test("change shipping has both options", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true, category: [] } });
    render(<CreateProduct />);

    fireEvent.mouseDown(screen.getByText(/Select Shipping/i));

    await waitFor(() => screen.getByText("No"));
    await waitFor(() => screen.getByText("Yes"));

    expect(screen.getByText("No")).toBeInTheDocument();
    expect(screen.getByText("Yes")).toBeInTheDocument();
  });

  test("change shipping reflects properly", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true, category: [] } });
    render(<CreateProduct />);

    fireEvent.mouseDown(screen.getByText(/Select Shipping/i));

    await waitFor(() => screen.getByText("No"));

    fireEvent.click(screen.getByText("No"));
    
    await waitFor(() => {
      expect(screen.getAllByText("No")[0]).toBeInTheDocument();
      expect(screen.queryByText(/Select Shipping/i)).not.toBeInTheDocument();
    });
  });
});
