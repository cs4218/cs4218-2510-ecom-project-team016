// This was generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// Edits were made to fix issues and improve coverage 
import React from "react";
import { render, screen, waitFor } from "@testing-library/react";
import Users from "client/src/pages/admin/Users";
import axios from "axios";

jest.mock("axios");
// Mock Layout and AdminMenu so we can check if they render without full implementation
jest.mock("client/src/components/Layout", () => ({ children }) => (
  <div>Mocked Layout {children}</div>
));
jest.mock("client/src/components/AdminMenu", () => () => <div>Mocked AdminMenu</div>);

describe("Users Component", () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  it("renders heading and AdminMenu", () => {
    render(<Users />);
    expect(screen.getByText("All Users")).toBeInTheDocument();
    expect(screen.getByText("Mocked AdminMenu")).toBeInTheDocument();
    expect(screen.getByText("Mocked Layout")).toBeInTheDocument();
  });

  it("fetches and displays users", async () => {
    const mockUsers = [
      { _id: "1", name: "Alice", email: "alice@test.com", role: 0, createdAt: new Date() },
      { _id: "2", name: "Bob", email: "bob@test.com", role: 1, createdAt: new Date() },
    ];
    axios.get.mockResolvedValue({ data: { success: true, users: mockUsers } });

    render(<Users />);

    await waitFor(() => {
      expect(screen.getByText("Alice")).toBeInTheDocument();
      expect(screen.getByText("Bob")).toBeInTheDocument();
    });
  });

  it("shows error toast when API fails", async () => {
    axios.get.mockRejectedValue(new Error("API Error"));
    render(<Users />);
    await waitFor(() => {
      expect(screen.getByText("All Users")).toBeInTheDocument(); // Component still renders
    });
  });
});