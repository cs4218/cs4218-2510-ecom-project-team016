// This was generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// There were edits to fix issues
import React from "react";
import { render, screen, waitFor } from "@testing-library/react";
import { MemoryRouter, Routes, Route } from 'react-router-dom';
import Orders from "client/src/pages/user/Orders";
import axios from "axios";
import { useAuth } from "client/src/context/auth";

// Mock axios
jest.mock("axios");

jest.mock('client/src/context/auth', () => ({
    useAuth: jest.fn(() => [null, jest.fn()]) // Mock useAuth hook to return null state and a mock function for setAuth
}));

jest.mock('client/src/context/cart', () => ({
    useCart: jest.fn(() => [null, jest.fn()]) // Mock useCart hook to return null state and a mock function
}));

jest.mock('client/src/hooks/useCategory', () => jest.fn(() => []));

jest.mock("client/src/components/Layout", () => ({ children }) => (
    <div>Mocked Layout {children}</div>
));

describe("Orders Component", () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });

    it("renders orders after fetching", async () => {
        // Override default mock to simulate logged-in user
        useAuth.mockReturnValue([{ token: "fake-token" }, jest.fn()]);

        // Mock API response
        const mockOrders = [
            {
                _id: "order1",
                status: "Processing",
                buyer: { name: "John Doe" },
                createAt: "2025-01-01T00:00:00.000Z",
                payment: { success: true },
                products: [
                    {
                        _id: "prod1",
                        name: "Product 1",
                        description: "This is product 1 description",
                        price: 100,
                    },
                ],
            },
        ];

        axios.get.mockResolvedValueOnce({ data: mockOrders });

        render(
            <MemoryRouter initialEntries={['/user/orders']}>
                <Routes>
                    <Route path="/user/orders" element={<Orders />} />
                </Routes>
            </MemoryRouter>
        );

        // Check heading
        expect(await screen.findByText("All Orders")).toBeInTheDocument();
        expect(await screen.findByText("John Doe")).toBeInTheDocument();
        expect(await screen.findByText("Product 1")).toBeInTheDocument();
        expect(await screen.findByText(/Price : 100/)).toBeInTheDocument(); // Used /Price : 100/ to match the text with regex
    });

    it("renders no orders if API returns empty array", async () => {
        useAuth.mockReturnValue([{ token: "fake-token" }, jest.fn()]);
        axios.get.mockResolvedValueOnce({ data: [] });

        render(
            <MemoryRouter initialEntries={['/user/orders']}>
                <Routes>
                    <Route path="/user/orders" element={<Orders />} />
                </Routes>
            </MemoryRouter>
        );

        expect(await screen.findByText("All Orders")).toBeInTheDocument();
        expect(await screen.queryByText("John Doe")).not.toBeInTheDocument();

    });

    it("handles API error gracefully", async () => {
        useAuth.mockReturnValue([{ token: "fake-token" }, jest.fn()]);
        const consoleSpy = jest.spyOn(console, "log").mockImplementation(() => { });
        axios.get.mockRejectedValueOnce(new Error("API failed"));

        render(
            <MemoryRouter initialEntries={['/user/orders']}>
                <Routes>
                    <Route path="/user/orders" element={<Orders />} />
                </Routes>
            </MemoryRouter>
        );

        await waitFor(() => {
            expect(consoleSpy).toHaveBeenCalledWith(expect.any(Error));
        });

        consoleSpy.mockRestore();
    });

    it("does not fetch orders when user is not logged in", async () => {
        useAuth.mockReturnValue([null, jest.fn()]); // no token

        render(
            <MemoryRouter initialEntries={['/user/orders']}>
                <Routes>
                    <Route path="/user/orders" element={<Orders />} />
                </Routes>
            </MemoryRouter>
        );

        expect(axios.get).not.toHaveBeenCalled();
    });

    it("renders order with no products", async () => {
        useAuth.mockReturnValue([{ token: "fake-token" }, jest.fn()]);
        const mockOrders = [{
            _id: "order2",
            status: "Pending",
            buyer: { name: "Jane Doe" },
            createAt: "2025-01-01T00:00:00.000Z",
            payment: { success: false },
            products: [],
        }];
        axios.get.mockResolvedValueOnce({ data: mockOrders });

        render(
            <MemoryRouter initialEntries={['/user/orders']}>
                <Routes>
                    <Route path="/user/orders" element={<Orders />} />
                </Routes>
            </MemoryRouter>
        );

        expect(await screen.findByText("Jane Doe")).toBeInTheDocument();
        expect(screen.queryByText(/Price/)).not.toBeInTheDocument(); // Used /Price/ to match the text with regex
    });
});
