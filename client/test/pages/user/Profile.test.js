// This was generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// Edits were made to fix issues and improve coverage 
import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import Profile from "client/src/pages/user/Profile";
import axios from "axios";
import toast from "react-hot-toast";
import { useAuth } from "client/src/context/auth";

// mock dependencies
jest.mock("axios");
jest.mock("react-hot-toast", () => ({
  error: jest.fn(),
  success: jest.fn(),
}));

jest.mock('client/src/context/auth', () => ({
  useAuth: jest.fn(() => [null, jest.fn()]) // Mock useAuth hook to return null state and a mock function for setAuth
}));
jest.mock("client/src/components/UserMenu", () => () => <div>UserMenuMock</div>);
jest.mock("client/src/components/Layout", () => ({ children }) => (
  <div>LayoutMock {children}</div>
));

describe("Profile Component", () => {
  let setAuthMock;
  let localStorageSpy;

  beforeEach(() => {
    setAuthMock = jest.fn();
    (useAuth).mockReturnValue([
      {
        user: {
          name: "John Doe",
          email: "john@example.com",
          phone: "123456",
          address: "Old Street",
        },
      },
      setAuthMock,
    ]);

    localStorageSpy = jest.spyOn(Storage.prototype, "setItem");
    jest.spyOn(Storage.prototype, "getItem").mockReturnValue(
      JSON.stringify({
        token: "token",
        user: { name: "John Doe", email: "john@example.com" },
      })
    );

    jest.clearAllMocks();
  });

  test("renders with initial user data", () => {
    render(<Profile />);
    expect(screen.getByDisplayValue("John Doe")).toBeInTheDocument();
    expect(screen.getByDisplayValue("john@example.com")).toBeDisabled();
    expect(screen.getByDisplayValue("123456")).toBeInTheDocument();
    expect(screen.getByDisplayValue("Old Street")).toBeInTheDocument();
  });

  test("updates input fields on change", () => {
    render(<Profile />);
    // Change name
    fireEvent.change(screen.getByPlaceholderText("Enter Your Name"), {
      target: { value: "Jane" },
    });
    expect(screen.getByDisplayValue("Jane")).toBeInTheDocument();
    // Change email
    fireEvent.change(screen.getByPlaceholderText("Enter Your Email"), {
      target: { value: "jane@example.com" },
    });
    expect(screen.getByDisplayValue("jane@example.com")).toBeInTheDocument();
    // Change password
    fireEvent.change(screen.getByPlaceholderText("Enter Your Password"), {
      target: { value: "newpass" },
    });
    expect(screen.getByDisplayValue("newpass")).toBeInTheDocument();
    // Change phone
    fireEvent.change(screen.getByPlaceholderText("Enter Your Phone"), {
      target: { value: "987654" },
    });
    expect(screen.getByDisplayValue("987654")).toBeInTheDocument();
    // Change address
    fireEvent.change(screen.getByPlaceholderText("Enter Your Address"), {
      target: { value: "New Street" },
    });
    expect(screen.getByDisplayValue("New Street")).toBeInTheDocument();
  });

  test("submits successfully and updates auth/localStorage", async () => {
    axios.put.mockResolvedValue({
      data: { updatedUser: { name: "Jane Doe", email: "john@example.com" } },
    });

    render(<Profile />);
    fireEvent.click(screen.getByText("UPDATE"));

    await waitFor(() => {
      expect(setAuthMock).toHaveBeenCalledWith({
        user: { name: "Jane Doe", email: "john@example.com" },
      });
      expect(localStorageSpy).toHaveBeenCalledWith(
        "auth",
        JSON.stringify({
          token: "token",
          user: { name: "Jane Doe", email: "john@example.com" },
        })
      );
      expect(toast.success).toHaveBeenCalledWith("Profile Updated Successfully");
    });
  });

  test("handles API error response", async () => {
    axios.put.mockResolvedValue({ data: { error: "Invalid request" } });

    render(<Profile />);
    fireEvent.click(screen.getByText("UPDATE"));

    await waitFor(() => {
      expect(toast.error).toHaveBeenCalledTimes(1);
      expect(toast.error).toHaveBeenCalledWith("Invalid request");
      expect(setAuthMock).not.toHaveBeenCalled();
    });
  });

  test("handles axios exception", async () => {
    axios.put.mockRejectedValue(new Error("Network error"));

    render(<Profile />);
    fireEvent.click(screen.getByText("UPDATE"));

    await waitFor(() => {
      expect(toast.error).toHaveBeenCalledWith("Something went wrong");
    });
  });
});
