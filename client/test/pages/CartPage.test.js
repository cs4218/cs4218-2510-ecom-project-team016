// This was generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// There was some edits to fix minor issues.
import React from "react";
import { render, screen, fireEvent, act } from "@testing-library/react";
import CartPage from "client/src/pages/CartPage";
import { useCart } from "client/src/context/cart";
import { useAuth } from "client/src/context/auth";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import toast from "react-hot-toast";


let mockInstanceSetter;
let localStorageMock;
const mockRequestPaymentMethod = jest.fn();

jest.mock("braintree-web-drop-in-react", () => {
  return ({ onInstance }) => {
    mockInstanceSetter = onInstance;
    return <div>DropIn Mock</div>;
  };
});

jest.mock("client/src/context/cart");
jest.mock("client/src/context/auth");
jest.mock("react-router-dom", () => ({
  useNavigate: jest.fn(),
}));
jest.mock("axios");
jest.mock("react-hot-toast", () => ({
  success: jest.fn(),
}));
jest.mock("client/src/components/Layout", () => ({ children }) => <div>{children}</div>);


beforeAll(() => {
  localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
  };
  Object.defineProperty(window, 'localStorage', {
    value: localStorageMock,
  });
});

describe("CartPage", () => {
  const mockNavigate = jest.fn();
  const mockSetCart = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    useNavigate.mockReturnValue(mockNavigate);
    useCart.mockReturnValue([[], mockSetCart]);
    
    axios.get.mockResolvedValue({ data: { clientToken: "token-123" } });
  });

  const setup = (cart = [], auth = { token: "123", user: { name: "John", address: "123 St" } }) => {
    useCart.mockReturnValue([cart, mockSetCart]);
    useAuth.mockReturnValue([auth, jest.fn()]);

    return render(<CartPage />);
  };

  test("renders empty cart message when cart is empty", async () => {
    setup([], { token: null, user: null });

    expect(await screen.findByText(/Hello Guest/i)).toBeInTheDocument();
    expect(screen.getByText(/Your Cart Is Empty/i)).toBeInTheDocument();
  });

  test("renders cart items and total price", async () => {
    const cartItems = [
      { _id: "1", name: "Product 1", description: "desc1", price: 100 },
      { _id: "2", name: "Product 2", description: "desc2", price: 200 },
    ];

    setup(cartItems);

    expect(await screen.findByText(/Product 1/i)).toBeInTheDocument();
    expect(screen.getByText(/Product 2/i)).toBeInTheDocument();
    expect(screen.getByText(/Total : \$300/i)).toBeInTheDocument();
  });

  test("calls removeCartItem when remove button is clicked", async () => {
    const cartItems = [{ _id: "1", name: "Product 1", description: "desc1", price: 100 }];
    
    setup(cartItems);

    const removeBtn = await screen.findByRole("button", { name: /Remove/i });
    fireEvent.click(removeBtn);
    
    expect(mockSetCart).toHaveBeenCalledWith([]); 
  });

  test("calls navigate when updating address or login", async () => {
    setup([], { token: null, user: null });

    const loginBtn = screen.getByRole("button", { name: /Plase Login to checkout/i });
    fireEvent.click(loginBtn);
    expect(mockNavigate).toHaveBeenCalledWith("/login", { state: "/cart" });
  });

  test("renders DropIn, handles payment flow successfully, and calls axios.post", async () => {
    const cartItems = [{ _id: "1", name: "Product 1", description: "desc1", price: 100, photo: { data: {} } }];
    setup(cartItems);
    
    await screen.findByText("DropIn Mock");

    const mockInstance = {
      requestPaymentMethod: mockRequestPaymentMethod.mockResolvedValue({ nonce: "fake-nonce" }),
    };
    
    await act(async () => {
      if (mockInstanceSetter) {
        mockInstanceSetter(mockInstance);
      } else {
        throw new Error("mockInstanceSetter was not captured by the DropIn mock.");
      }
    });
    
    axios.post.mockResolvedValue({ 
      data: { ok: true } 
    });

    const paymentBtn = screen.getByRole("button", { name: /Make Payment/i });
    
    fireEvent.click(paymentBtn);
    await act(async () => {
      await Promise.resolve();
    });

    expect(mockRequestPaymentMethod).toHaveBeenCalledTimes(1); 
    
    expect(axios.post).toHaveBeenCalledTimes(1);
    expect(axios.post).toHaveBeenCalledWith("/api/v1/product/braintree/payment", {
      nonce: "fake-nonce",
      cart: cartItems,
    });
    
    expect(toast.success).toHaveBeenCalledWith("Payment Completed Successfully ");
    expect(mockSetCart).toHaveBeenCalledWith([]);
    expect(mockNavigate).toHaveBeenCalledWith("/dashboard/user/orders");
  });

  test("clears the cart from localStorage upon successful payment", async () => {
    const cartItems = [{ _id: "1", name: "Product 1", description: "desc1", price: 100, photo: { data: {} } }];
    
    localStorageMock.removeItem.mockClear();
    localStorageMock.setItem("cart", JSON.stringify(cartItems));

    setup(cartItems);

    await screen.findByText("DropIn Mock");

    const mockInstance = {
      requestPaymentMethod: mockRequestPaymentMethod.mockResolvedValue({ nonce: "fake-nonce" }),
    };
    axios.post.mockResolvedValue({ data: { ok: true } });

    await act(async () => {
      if (mockInstanceSetter) {
        mockInstanceSetter(mockInstance);
      }
    });

    const paymentBtn = screen.getByRole("button", { name: /Make Payment/i });

    fireEvent.click(paymentBtn);
    await act(async () => {
      await Promise.resolve();
    });

    expect(localStorageMock.removeItem).toHaveBeenCalledWith("cart");
  });
});
