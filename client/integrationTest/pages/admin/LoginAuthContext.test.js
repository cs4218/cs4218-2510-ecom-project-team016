// This was initially generated by ChatGPT based on the original codes and the following instruction:
// "Help me write integration test between the Login and auth context component"
// There were edits to fix issues.
import React from "react";
import { render, fireEvent, waitFor } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import axios from "axios";
import Login from "../../../src/pages/Auth/Login";
import { AuthProvider, useAuth } from "../../../src/context/auth";
import toast from "react-hot-toast";

// Mock dependencies
jest.mock("axios");
jest.mock("react-hot-toast");

// Mock Layout component and its dependencies
jest.mock("../../../src/components/Layout", () => {
  return function Layout({ children }) {
    return <div data-testid="layout">{children}</div>;
  };
});

// Component to test auth context state
const AuthContextTester = () => {
  const [auth] = useAuth();
  return (
    <div data-testid="auth-context-tester">
      <span data-testid="auth-user">{JSON.stringify(auth.user)}</span>
      <span data-testid="auth-token">{auth.token}</span>
    </div>
  );
};

describe("Login and Auth Context Integration Test", () => {
  beforeEach(() => {
    // Clear all mocks before each test
    jest.clearAllMocks();
    localStorage.clear();

    // Mock toast methods
    toast.success = jest.fn();
    toast.error = jest.fn();
  });

  test("Successful login response will result in the auth context containing the correct user information", async () => {
    // Arrange: Mock successful API response
    const mockUserData = {
      _id: "123456",
      name: "Test User",
      email: "test@example.com",
      phone: "1234567890",
      address: "123 Test St",
      role: 0,
    };

    const mockResponse = {
      data: {
        success: true,
        message: "login successfully",
        user: mockUserData,
        token: "mock-jwt-token-12345",
      },
    };

    axios.post.mockResolvedValueOnce(mockResponse);

    // Act: Render Login component wrapped with AuthProvider
    const { getByPlaceholderText, getByText, getByTestId } = render(
      <AuthProvider>
        <MemoryRouter>
          <Login />
          <AuthContextTester />
        </MemoryRouter>
      </AuthProvider>
    );

    // Fill in the form
    const emailInput = getByPlaceholderText("Enter Your Email");
    const passwordInput = getByPlaceholderText("Enter Your Password");
    const loginButton = getByText("LOGIN");

    fireEvent.change(emailInput, {
      target: { value: "test@example.com" },
    });
    fireEvent.change(passwordInput, {
      target: { value: "password123" },
    });

    // Submit the form
    fireEvent.click(loginButton);

    // Assert: Wait for the auth context to be updated
    await waitFor(() => {
      const authUser = getByTestId("auth-user");
      const authToken = getByTestId("auth-token");

      // Verify auth context contains correct user information
      expect(authUser.textContent).toBe(JSON.stringify(mockUserData));
      expect(authToken.textContent).toBe("mock-jwt-token-12345");
    });

    // Verify axios was called with correct parameters
    expect(axios.post).toHaveBeenCalledWith("/api/v1/auth/login", {
      email: "test@example.com",
      password: "password123",
    });

    // Verify success toast was shown
    expect(toast.success).toHaveBeenCalledWith("login successfully", {
      duration: 5000,
      icon: "üôè",
      style: {
        background: "green",
        color: "white",
      },
    });

    // Verify localStorage was updated
    const storedAuth = JSON.parse(localStorage.getItem("auth"));
    expect(storedAuth).toEqual({
      user: mockUserData,
      token: "mock-jwt-token-12345",
    });
  });
});
