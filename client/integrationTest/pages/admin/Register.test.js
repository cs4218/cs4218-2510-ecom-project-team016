// This was initially generated by ChatGPT based on the original codes and the following instruction:
// "Help me write integration test between the Login and auth context component"
// There were edits to fix issues.
import React from "react";
import { screen, render, fireEvent, waitFor } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import axios from "axios";
import Login from "../../../src/pages/Auth/Login";
import { AuthProvider, useAuth } from "../../../src/context/auth";
import toast from "react-hot-toast";
import { renderWithProviders } from "../../testUtils";
import { useLocation } from "react-router-dom";
import Header from "../../../src/components/Header";
import { Routes, Route } from "react-router-dom";
import Forget from "../../../src/pages/Auth/Forget";
import Register from "../../../src/pages/Auth/Register";

// Mock dependencies
jest.mock("axios");
jest.mock("react-hot-toast");

// Mock Layout component and its dependencies
jest.mock("../../../src/components/Layout", () => {
  return function Layout({ children }) {
    return <div data-testid="layout">{children}</div>;
  };
});

// Component to test auth context state
const AuthContextTester = () => {
  const [auth] = useAuth();
  return (
    <div data-testid="auth-context-tester">
      <span data-testid="auth-user">{JSON.stringify(auth.user)}</span>
      <span data-testid="auth-token">{auth.token}</span>
    </div>
  );
};

describe("Login and Auth Context Integration Test", () => {
  beforeEach(() => {
    // Clear all mocks before each test
    jest.clearAllMocks();
    localStorage.clear();

    // Mock toast methods
    toast.success = jest.fn();
    toast.error = jest.fn();
  });

  test("Navigates to the register page when header Register tab is clicked", async () => {
    const LocationDisplay = () => {
      const location = useLocation();
      return <div data-testid="location-display">{location.pathname}</div>;
    };

    renderWithProviders(
      <Routes>
        <Route
          path="/"
          element={
            <>
              <Header />
              <LocationDisplay />
              <div data-testid="home-page">Home Page</div>
            </>
          }
        />
        <Route
          path="/register"
          element={
            <>
              <Header />
              <LocationDisplay />
              <Register />
            </>
          }
        />
      </Routes>,
      { route: "/" }
    );

    // Navigate from home page to Login
    expect(screen.getByTestId("location-display").textContent).toBe("/");
    expect(screen.getByTestId("home-page")).toBeInTheDocument();

    const headerLoginLink = screen.getByRole("link", { name: /register/i });
    expect(headerLoginLink).toBeVisible();
    fireEvent.click(headerLoginLink);

    // Wait for navigation to complete and Login page to render
    await waitFor(() => {
      expect(screen.getByTestId("location-display").textContent).toBe(
        "/register"
      );
    });

    expectRegisterPageRenderCorrectly();
  });

  test("Login page renders correctly when successful registration", async () => {
    const LocationDisplay = () => {
      const location = useLocation();
      return <div data-testid="location-display">{location.pathname}</div>;
    };

    const { getByRole, getByText, getByPlaceholderText } = renderWithProviders(
      <Routes>
        <Route
          path="/login"
          element={
            <>
              <Header />
              <LocationDisplay />
              <Login />
            </>
          }
        />
        <Route
          path="/register"
          element={
            <>
              <Header />
              <LocationDisplay />
              <Register />
            </>
          }
        />
      </Routes>,
      { route: "/register" }
    );

    axios.post.mockResolvedValueOnce({ data: { success: true } });

    // register user
    fireEvent.change(getByPlaceholderText("Enter Your Name"), {
      target: { value: "John Doe" },
    });
    fireEvent.change(getByPlaceholderText("Enter Your Email"), {
      target: { value: "test@example.com" },
    });
    fireEvent.change(getByPlaceholderText("Enter Your Password"), {
      target: { value: "password123" },
    });
    fireEvent.change(getByPlaceholderText("Enter Your Phone"), {
      target: { value: "1234567890" },
    });
    fireEvent.change(getByPlaceholderText("Enter Your Address"), {
      target: { value: "123 Street" },
    });
    fireEvent.change(getByPlaceholderText("Enter Your DOB"), {
      target: { value: "2000-01-01" },
    });
    fireEvent.change(getByPlaceholderText("What is Your Favorite sports"), {
      target: { value: "Football" },
    });

    fireEvent.click(getByText("REGISTER"));

    // check if at login page
    await waitFor(() => {
      expect(screen.getByTestId("location-display").textContent).toBe("/login");
    });

    expectLoginPageRenderCorrectly();
  });
});

// helper functions
const expectRegisterPageRenderCorrectly = () => {
  expect(
    screen.getByRole("heading", { name: /REGISTER FORM/i })
  ).toBeInTheDocument();
  expect(screen.getByPlaceholderText("Enter Your Email")).toBeInTheDocument();
  expect(screen.getByPlaceholderText("Enter Your Name")).toBeInTheDocument();
  expect(
    screen.getByPlaceholderText("Enter Your Password")
  ).toBeInTheDocument();
  expect(screen.getByPlaceholderText("Enter Your Phone")).toBeInTheDocument();
  expect(screen.getByPlaceholderText("Enter Your Address")).toBeInTheDocument();
  expect(screen.getByPlaceholderText("Enter Your DOB")).toBeInTheDocument();
  expect(
    screen.getByPlaceholderText("What is Your Favorite sports")
  ).toBeInTheDocument();
};

const expectLoginPageRenderCorrectly = () => {
  expect(
    screen.getByRole("heading", { name: /LOGIN FORM/i })
  ).toBeInTheDocument();
  expect(screen.getByPlaceholderText("Enter Your Email")).toBeInTheDocument();
  expect(
    screen.getByPlaceholderText("Enter Your Password")
  ).toBeInTheDocument();
};
