// This was initially generated by ChatGPT based on the original codes and the following instruction:
// "help me write integration tests for CreateCategory and CategoryForm"
// There were edits to fix issues.

import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import axios from "axios";
import toast from "react-hot-toast";
import CreateCategory from "client/src/pages/admin/CreateCategory"; // adjust path

jest.mock("axios");
jest.mock("react-hot-toast", () => ({
  success: jest.fn(),
  error: jest.fn(),
}));

// Mock Layout and AdminMenu (to isolate test)
jest.mock("client/src/components/Layout", () => ({ children }) => <div>{children}</div>);
jest.mock("client/src/components/AdminMenu", () => () => <div>AdminMenu</div>);

describe("CreateCategory Integration", () => {
  const mockCategories = [
    { _id: "1", name: "Books" },
    { _id: "2", name: "Electronics" },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
  });

  test("renders categories fetched from API", async () => {
    axios.get.mockResolvedValueOnce({ data: { success: true, category: mockCategories } });

    render(<CreateCategory />);

    // Wait for categories to load
    await waitFor(() => expect(screen.getByText("Books")).toBeInTheDocument());
    expect(screen.getByText("Electronics")).toBeInTheDocument();
  });

  test("creates a new category", async () => {
    axios.get.mockResolvedValue({ data: { success: true, category: mockCategories } });
    axios.post.mockResolvedValueOnce({ data: { success: true } });

    render(<CreateCategory />);

    const input = screen.getByPlaceholderText("Enter new category");
    const submitBtn = screen.getByText("Submit");

    fireEvent.change(input, { target: { value: "Clothing" } });
    fireEvent.click(submitBtn);

    await waitFor(() => expect(axios.post).toHaveBeenCalledWith(
      "/api/v1/category/create-category",
      { name: "Clothing" }
    ));
    expect(toast.success).toHaveBeenCalledWith("Clothing is created");
  });

  test("updates a category", async () => {
    axios.get.mockResolvedValue({ data: { success: true, category: mockCategories } });
    axios.put.mockResolvedValueOnce({ data: { success: true } });

    render(<CreateCategory />);

    await waitFor(() => screen.getByText("Books"));

    fireEvent.click(screen.getAllByText("Edit")[0]); // Click edit on first category
    const modalInput = screen.getAllByPlaceholderText("Enter new category")[1]; // Second form

    fireEvent.change(modalInput, { target: { value: "Novels" } });
    fireEvent.click(screen.getAllByText("Submit")[1]);

    await waitFor(() =>
      expect(axios.put).toHaveBeenCalledWith(
        "/api/v1/category/update-category/1",
        { name: "Novels" }
      )
    );
    expect(toast.success).toHaveBeenCalledWith("Novels is updated");
  });
});