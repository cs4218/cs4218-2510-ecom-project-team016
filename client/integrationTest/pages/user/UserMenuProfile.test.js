// This was initially generated by ChatGPT based on the original codes and the following instruction:
// "help me write integration tests for Profile and UserMenu"
// There were edits to fix issues and improve code coverage
import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import Profile from "client/src/pages/user/Profile";
import { useAuth } from "client/src/context/auth";
import axios from "axios";
import toast from "react-hot-toast";

// Mocks
jest.mock("axios");
jest.mock("react-hot-toast", () => ({
    success: jest.fn(),
    error: jest.fn(),
}));

jest.mock("client/src/context/auth", () => ({
    useAuth: jest.fn(),
}));

jest.mock("client/src/components/Layout", () => ({ children }) => (
    <div>LayoutMock {children}</div>
));

describe("Profile Page Integration Test", () => {
    const mockSetAuth = jest.fn();
    const mockUser = {
        name: "John Doe",
        email: "john@example.com",
        phone: "123456789",
        address: "123 Street",
    };

    beforeEach(() => {
        useAuth.mockReturnValue([{ user: mockUser }, mockSetAuth]);
        localStorage.setItem("auth", JSON.stringify({ user: mockUser }));
        jest.clearAllMocks();
    });

    test("renders user info correctly", () => {
        render(
            <MemoryRouter>
                <Profile />
            </MemoryRouter>
        );

        expect(screen.getByPlaceholderText("Enter Your Name").value).toBe("John Doe");
        expect(screen.getByPlaceholderText("Enter Your Email").value).toBe("john@example.com");
        expect(screen.getByPlaceholderText("Enter Your Phone").value).toBe("123456789");
        expect(screen.getByPlaceholderText("Enter Your Address").value).toBe("123 Street");
    });

    test("updates profile successfully", async () => {
        axios.put.mockResolvedValueOnce({
            data: { updatedUser: { name: "Updated John" } },
        });

        render(
            <MemoryRouter>
                <Profile />
            </MemoryRouter>
        );

        const nameInput = screen.getByPlaceholderText("Enter Your Name");
        fireEvent.change(nameInput, { target: { value: "Updated John" } });
        await waitFor(() => expect(nameInput.value).toBe("Updated John"));

        fireEvent.click(screen.getByText("UPDATE"));

        await waitFor(() => {
            expect(axios.put).toHaveBeenCalledWith(
                "/api/v1/auth/profile",
                expect.objectContaining({ name: "Updated John" })
            );
            expect(toast.success).toHaveBeenCalledWith("Profile Updated Successfully");
        });
    });


    test("handles profile update error", async () => {
        axios.put.mockResolvedValueOnce({
            data: { error: "Update failed" },
        });
        render(
            <MemoryRouter>
                <Profile />
            </MemoryRouter>
        );
        fireEvent.click(screen.getByText("UPDATE"));
        await waitFor(() => {
            expect(axios.put).toHaveBeenCalledWith(
                "/api/v1/auth/profile",
                expect.objectContaining({ name: "John Doe" })
            );
            expect(toast.error).toHaveBeenCalledWith("Update failed");
        });
    });

    test("updates all form fields correctly", () => {
        render(
            <MemoryRouter>
                <Profile />
            </MemoryRouter>
        );

        fireEvent.change(screen.getByPlaceholderText("Enter Your Name"), { target: { value: "Updated John" } });
        fireEvent.change(screen.getByPlaceholderText("Enter Your Email"), { target: { value: "newemail@test.com" } });
        fireEvent.change(screen.getByPlaceholderText("Enter Your Password"), { target: { value: "newpassword" } });
        fireEvent.change(screen.getByPlaceholderText("Enter Your Phone"), { target: { value: "987654321" } });
        fireEvent.change(screen.getByPlaceholderText("Enter Your Address"), { target: { value: "456 Avenue" } });

        expect(screen.getByPlaceholderText("Enter Your Name").value).toBe("Updated John");
        expect(screen.getByPlaceholderText("Enter Your Email").value).toBe("newemail@test.com");
        expect(screen.getByPlaceholderText("Enter Your Password").value).toBe("newpassword");
        expect(screen.getByPlaceholderText("Enter Your Phone").value).toBe("987654321");
        expect(screen.getByPlaceholderText("Enter Your Address").value).toBe("456 Avenue");
    });

    test("handles network error during profile update", async () => {
        axios.put.mockRejectedValueOnce(new Error("Network Error"));

        render(
            <MemoryRouter>
            <Profile />
            </MemoryRouter>
        );

        fireEvent.click(screen.getByText("UPDATE"));

        await waitFor(() => {
            expect(toast.error).toHaveBeenCalledWith("Something went wrong");
        });
    });

});
