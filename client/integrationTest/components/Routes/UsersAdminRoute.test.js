
// This was initially generated by ChatGPT based on the original codes and the following instruction:
// "help me write integration tests for Users and AdminRoute"
// There were edits to fix issues and improve code coverage
import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { MemoryRouter, Routes, Route } from "react-router-dom";
import AdminRoute from "client/src/components/Routes/AdminRoute";
import AdminDashboard from "client/src/pages/admin/AdminDashboard";
import Users from "client/src/pages/admin/Users";
import Products from "client/src/pages/admin/Products";
import axios from "axios";
import { useAuth } from "client/src/context/auth";

jest.mock("axios");
jest.mock('client/src/context/auth', () => ({
  useAuth: jest.fn(() => [null, jest.fn()]) // Mock useAuth hook to return null state and a mock function for setAuth
}));

jest.mock("client/src/components/Layout", () => ({ children }) => (
  <div>LayoutMock {children}</div>
));


describe("AdminRoute Integration Test", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test("renders Users page when admin-auth passes", async () => {
    useAuth.mockReturnValue([{ token: "admin-token" }, jest.fn()]);
    axios.get.mockResolvedValue({ data: { ok: true } });

    render(
      <MemoryRouter initialEntries={["/dashboard/admin/users"]}>
        <Routes>
          <Route path="/dashboard" element={<AdminRoute />}>
            <Route path="admin/users" element={<Users />} />
          </Route>
        </Routes>
      </MemoryRouter>
    );

    await waitFor(() => expect(screen.getByText(/All Users/i)).toBeInTheDocument());
  });

  test("renders Spinner/fallback when admin-auth fails", async () => {
    useAuth.mockReturnValue([{ token: "admin-token" }, jest.fn()]);
    axios.get.mockResolvedValue({ data: { ok: false } });

    render(
      <MemoryRouter initialEntries={["/dashboard/admin/users"]}>
        <Routes>
          <Route path="/dashboard" element={<AdminRoute />}>
            <Route path="admin/users" element={<Users />} />
          </Route>
        </Routes>
      </MemoryRouter>
    );

    // Wait for async auth check to finish
    await waitFor(() => {
      expect(screen.getByText(/loading/i)).toBeInTheDocument(); // Spinner fallback contains "loading"
    });
  });
});
