// This was initially generated by ChatGPT based on the original codes and the following instruction:
// "help me write integration tests for Dashboard and PrivateRoute"
// There were edits to fix issues and improve code coverage
import React from "react";
import { render, screen, waitFor } from "@testing-library/react";
import { MemoryRouter, Routes, Route } from "react-router-dom";
import PrivateRoute from "client/src/components/Routes/PrivateRoute";
import Dashboard from "client/src/pages/user/Dashboard";
import { useAuth } from "client/src/context/auth";
import axios from "axios";

jest.mock("axios");

jest.mock('client/src/context/auth', () => ({
  useAuth: jest.fn(),
}));

jest.mock("client/src/components/Layout", () => ({ children }) => (
  <div>LayoutMock {children}</div>
));

describe("PrivateRoute Integration Test", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test("renders Dashboard page when user is logged in", async () => {
    useAuth.mockReturnValue([{
      token: "user-token",
      user: { name: "Test User", email: "test@example.com" }
    }, jest.fn()]);
    axios.get.mockResolvedValue({ data: { ok: true } });

    render(
      <MemoryRouter initialEntries={["/dashboard/user"]}>
        <Routes>
          <Route path="/dashboard" element={<PrivateRoute />}>
            <Route path="user" element={<Dashboard />} />
          </Route>
        </Routes>
      </MemoryRouter>
    );

    // Wait for async auth check to finish
    await waitFor(() => {
      expect(screen.getByText(/dashboard/i)).toBeInTheDocument();
      expect(screen.getByText(/test user/i)).toBeInTheDocument(); // user info rendered
    });
  });

  test("renders Spinner (or fallback) when user is not authorized", async () => {
    useAuth.mockReturnValue([{
      token: "user-token"
    }, jest.fn()]);
    axios.get.mockResolvedValue({ data: { ok: false } });

    render(
      <MemoryRouter initialEntries={["/dashboard/user"]}>
        <Routes>
          <Route path="/dashboard" element={<PrivateRoute />}>
            <Route path="user" element={<Dashboard />} />
          </Route>
        </Routes>
      </MemoryRouter>
    );

    // Wait for async auth check to finish
    await waitFor(() => {
      expect(screen.getByText(/loading/i)).toBeInTheDocument(); // Spinner fallback contains "loading"
    });
  });
});