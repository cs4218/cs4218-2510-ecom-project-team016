// This was initially generated by ChatGPT based on the original codes and the following instruction:
// "help me write integration tests for productController with real DB"
// There were edits to fix issues.
import formidable from "formidable";
import express from "express";
import mongoose from "mongoose";
import request from "supertest";
import fs from "fs";
import path from "path";
import dotenv from "dotenv";
import productModel from "../models/productModel.js";
import categoryModel from "../models/categoryModel.js";
import {
  createProductController,
  updateProductController,
  deleteProductController,
} from "./productController.js";

dotenv.config();

describe("Product Integration Tests", () => {
  let app;
  let categoryId;
  let productId;
  const testImage = path.join(__dirname, "test-image.jpg");

  beforeAll(async () => {
    await mongoose.connect(process.env.MONGO_URI_TEST);
    fs.writeFileSync(testImage, Buffer.alloc(100, 0));

    // Create a category for product foreign key
    const category = await categoryModel.create({ name: "Electronics2", slug: "electronics2" });
    categoryId = category._id;

    app = express();

    // Routes with formidable for multipart parsing
    const parseForm = (req, res, next) => {
      const form = formidable({ multiples: true });
      form.parse(req, (err, fields, files) => {
        if (err) return res.status(400).send({ error: "Form parse error" });
        req.fields = fields;
        req.files = files;
        next();
      });
    };

    app.post("/api/create-product", parseForm, createProductController);
    app.put("/api/update-product/:pid", parseForm, updateProductController);
    app.delete("/api/delete-product/:pid", deleteProductController);
  });

  afterAll(async () => {
    fs.unlinkSync(testImage);
    await categoryModel.deleteOne({ _id: categoryId });
    await mongoose.connection.close();
  });

  beforeEach(async () => {
    // Create a default product for update/delete tests
    const product = await productModel.create({
      name: "OldProduct",
      description: "Old desc",
      price: 100,
      category: categoryId,
      quantity: 5,
      shipping: true,
      slug: "oldproduct",
    });
    productId = product._id;
  });

  afterEach(async () => {
    // delete the test product
    await productModel.deleteOne({ _id: productId });
  });

  // ---------------- Create ----------------
  it("should fail if required fields are missing", async () => {
    const res = await request(app)
      .post("/api/create-product")
      .field("name", "")
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(500);
    expect(res.body.error).toBe("Name is Required");
  });

  it("should create product successfully with valid data", async () => {
    const res = await request(app)
      .post("/api/create-product")
      .field("name", "kektop")
      .field("description", "Powerful kektop")
      .field("price", "1500")
      .field("category", categoryId.toString())
      .field("quantity", "10")
      .field("shipping", true)
      .attach("photo", testImage)
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(201);
    expect(res.body.success).toBe(true);
    expect(res.body.message).toBe("Product Created Successfully");

    const inDb = await productModel.findOne({ name: "kektop" });
    expect(inDb).not.toBeNull();
    expect(inDb.slug).toBe("kektop");

    // Clean up
    await productModel.deleteOne({ _id: inDb._id });
  });

  it("should reject photo larger than 1MB", async () => {
    const bigPhoto = path.join(__dirname, "big-photo.jpg");
    fs.writeFileSync(bigPhoto, Buffer.alloc(1_100_000, 0));

    const res = await request(app)
      .post("/api/create-product")
      .field("name", "BigPhotoProduct")
      .field("description", "Too large image")
      .field("price", "100")
      .field("category", categoryId.toString())
      .field("quantity", "1")
      .field("shipping", true)
      .attach("photo", bigPhoto)
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(500);
    expect(res.body.error).toMatch(/less then 1mb/);

    fs.unlinkSync(bigPhoto);
  });

  // ---------------- Update ----------------
  it("should update product successfully with valid fields", async () => {
    const res = await request(app)
      .put(`/api/update-product/${productId}`)
      .field("name", "UpdatedProduct")
      .field("description", "Updated desc")
      .field("price", "200")
      .field("category", categoryId.toString())
      .field("quantity", "10")
      .field("shipping", false)
      .attach("photo", testImage)
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(201);
    expect(res.body.success).toBe(true);
    expect(res.body.message).toBe("Product Updated Successfully");
    expect(res.body.products.name).toBe("UpdatedProduct");

    const inDb = await productModel.findById(productId);
    expect(inDb.name).toBe("UpdatedProduct");
  });

  it("should fail if required field is missing", async () => {
    const res = await request(app)
      .put(`/api/update-product/${productId}`)
      .field("description", "No name")
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(500);
    expect(res.body.error).toBe("Name is Required");
  });

  it("should reject photo larger than 1MB on update", async () => {
    const bigPhoto = path.join(__dirname, "big-photo.jpg");
    fs.writeFileSync(bigPhoto, Buffer.alloc(1_100_000, 0));

    const res = await request(app)
      .put(`/api/update-product/${productId}`)
      .field("name", "BigPhotoProduct")
      .field("description", "Desc")
      .field("price", "100")
      .field("category", categoryId.toString())
      .field("quantity", "1")
      .field("shipping", true)
      .attach("photo", bigPhoto)
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(500);
    expect(res.body.error).toMatch(/less then 1mb/);

    fs.unlinkSync(bigPhoto);
  });

  // ---------------- Delete ----------------
  it("should delete a product successfully", async () => {
    const res = await request(app)
      .delete(`/api/delete-product/${productId}`)
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(res.body.message).toBe("Product Deleted Successfully");

    const inDb = await productModel.findById(productId);
    expect(inDb).toBeNull();
  });

  it("should handle invalid product id gracefully", async () => {
    const res = await request(app)
      .delete("/api/delete-product/invalid-id")
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(500);
    expect(res.body.message).toBe("Error while deleting product");
  });
});
