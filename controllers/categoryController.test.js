// This was generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// Yes, it was asked to write for a component, but this is a controller.
// There was some edits to fix minor issues.
import { createCategoryController } from "./categoryController";
import categoryModel from "../models/categoryModel";

jest.mock("../models/categoryModel");

describe("createCategoryController", () => {
  let req, res;

  beforeEach(() => {
    req = { body: {} };
    res = {
      status: jest.fn().mockReturnThis(),
      send: jest.fn(),
    };
    jest.clearAllMocks();
  });

  test("should return 401 if name is missing", async () => {
    await createCategoryController(req, res);
    expect(res.status).toHaveBeenCalledWith(401);
    expect(res.send).toHaveBeenCalledWith({ message: "Name is required" });
  });

  test("should return 200 if category already exists", async () => {
    req.body.name = "Electronics";
    categoryModel.findOne.mockResolvedValue({ name: "Electronics" });

    await createCategoryController(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.send).toHaveBeenCalledWith({
      success: true,
      message: "Category Already Exisits",
    });
  });

  test("should create category and return 201", async () => {
    req.body.name = "Books";
    categoryModel.findOne.mockResolvedValue(null);

    const savedCategory = { _id: "123", name: "Books", slug: "books" };
    categoryModel.mockImplementation(() => ({
      save: jest.fn().mockResolvedValue(savedCategory),
    }));

    await createCategoryController(req, res);

    expect(res.status).toHaveBeenCalledWith(201);
    expect(res.send).toHaveBeenCalledWith({
      success: true,
      message: "new category created",
      category: savedCategory,
    });
  });

  test("should handle errors and return 500", async () => {
    req.body.name = "Toys";
    const returnedError = new Error("DB error");
    categoryModel.findOne.mockRejectedValue(returnedError);

    await createCategoryController(req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.send).toHaveBeenCalledWith({
      success: false,
      error: returnedError,
      message: "Error in Category",
    });
  });
});
