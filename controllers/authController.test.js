// This was generated by ChatGPT based on the original code and the following instruction:
// "help me write unit tests for this component:"
// There were edits to fix issues.
import {
    updateProfileController,
    getOrdersController,
    getAllOrdersController,
    orderStatusController
} from "../controllers/authController.js";

import userModel from "../models/userModel.js";
import orderModel from "../models/orderModel.js";
import { hashPassword } from "../helpers/authHelper.js";

// Mock dependencies
jest.mock("../models/userModel.js");
jest.mock("../models/orderModel.js");
jest.mock("../helpers/authHelper.js");

describe("Auth Controllers Unit Tests", () => {
    let req;
    let res;

    beforeEach(() => {
        req = { user: { _id: "123" }, body: {}, params: {} };
        res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn(),
            send: jest.fn()
        };
        jest.clearAllMocks();
    });

    // -------------------------------
    // updateProfileController
    // -------------------------------
    it("should update profile successfully", async () => {
        req.body = { name: "John", password: "newpassword", phone: "123", address: "xyz" };

        const user = { _id: "123", name: "Old", password: "old", phone: "111", address: "abc" };
        userModel.findById.mockResolvedValue(user);
        hashPassword.mockResolvedValue("hashedpassword");
        userModel.findByIdAndUpdate.mockResolvedValue({
            ...user,
            name: "John",
            password: "hashedpassword",
            phone: "123",
            address: "xyz"
        });

        await updateProfileController(req, res);

        expect(hashPassword).toHaveBeenCalledWith("newpassword");
        expect(res.status).toHaveBeenCalledWith(200);
        expect(res.status().send).toHaveBeenCalledWith(expect.objectContaining({
            success: true,
            updatedUser: expect.objectContaining({ name: "John", password: "hashedpassword" })
        }));
    });

    it("should return error if password less than 6 chars", async () => {
        req.body = { password: "123" };
        userModel.findById.mockResolvedValue({ password: "old" });

        await updateProfileController(req, res);

        expect(res.json).toHaveBeenCalledWith({ error: "Passsword is required and 6 character long" });
    });

    // -------------------------------
    // getOrdersController
    // -------------------------------
    it("should get orders successfully", async () => {
        const orders = [{ _id: "1" }];

        // Last populate resolves to the data
        const secondPopulateMock = jest.fn().mockResolvedValue(orders);

        // First populate returns object with second populate
        const firstPopulateMock = jest.fn().mockReturnValue({ populate: secondPopulateMock });

        // find returns object with first populate
        orderModel.find.mockReturnValue({ populate: firstPopulateMock });

        // Mock res
        const res = { json: jest.fn() };
        const req = { user: { _id: "123" } };

        await getOrdersController(req, res);

        expect(orderModel.find).toHaveBeenCalledWith({ buyer: "123" });
        expect(res.json).toHaveBeenCalledWith(orders);
    });

    it("should handle error while fetching orders", async () => {
        const error = new Error("DB Error");
        const secondPopulateMock = jest.fn().mockRejectedValue(error);
        const firstPopulateMock = jest.fn().mockReturnValue({ populate: secondPopulateMock });
        orderModel.find.mockReturnValue({ populate: firstPopulateMock });

        await getOrdersController(req, res);

        expect(res.status).toHaveBeenCalledWith(500);
        expect(res.send).toHaveBeenCalledWith({
            success: false,
            message: "Error WHile Geting Orders",
            error,
        });
    });

    // -------------------------------
    // getAllOrdersController
    // -------------------------------
    it("should get all orders successfully", async () => {
        const orders = [{ _id: "1" }];

        // Mock the chain: find().populate().populate().sort() returns a promise
        const sortMock = jest.fn().mockResolvedValue(orders);
        const secondPopulateMock = jest.fn().mockReturnValue({ sort: sortMock });
        const firstPopulateMock = jest.fn().mockReturnValue({ sort: sortMock, populate: secondPopulateMock });

        orderModel.find.mockReturnValue({ populate: firstPopulateMock, sort: sortMock });

        await getAllOrdersController(req, res);

        expect(orderModel.find).toHaveBeenCalledWith({});
        expect(res.json).toHaveBeenCalledWith(orders);
    });

    it("should handle error while fetching all orders", async () => {
        const error = new Error("DB Error");
        const sortMock = jest.fn().mockRejectedValue(error);
        const secondPopulateMock = jest.fn().mockReturnValue({ sort: sortMock });
        const firstPopulateMock = jest.fn().mockReturnValue({ sort: sortMock, populate: secondPopulateMock });
        orderModel.find.mockReturnValue({ populate: firstPopulateMock, sort: sortMock });

        await getAllOrdersController(req, res);

        expect(res.status).toHaveBeenCalledWith(500);
        expect(res.send).toHaveBeenCalledWith({
            success: false,
            message: "Error While Getting Orders",
            error,
        });
    });

    // -------------------------------
    // orderStatusController
    // -------------------------------
    it("should update order status", async () => {
        req.params.orderId = "1";
        req.body.status = "Shipped";

        const updatedOrder = { _id: "1", status: "Shipped" };
        orderModel.findByIdAndUpdate.mockResolvedValue(updatedOrder);

        await orderStatusController(req, res);

        expect(orderModel.findByIdAndUpdate).toHaveBeenCalledWith("1", { status: "Shipped" }, { new: true });
        expect(res.json).toHaveBeenCalledWith(updatedOrder);
    });

    it("should handle error while updating order status", async () => {
        const error = new Error("DB Error");
        req.params.orderId = "1";
        req.body.status = "Shipped";

        orderModel.findByIdAndUpdate.mockRejectedValue(error);

        await orderStatusController(req, res);

        expect(res.status).toHaveBeenCalledWith(500);
        expect(res.send).toHaveBeenCalledWith({
            success: false,
            message: "Error While Updating Order",
            error,
        });
    });
});
