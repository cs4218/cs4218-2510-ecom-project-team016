// This was initially generated by ChatGPT based on the original codes and the following instruction:
// "help me write integration tests for categoryController with real DB"
// There were edits to fix issues.
import mongoose from "mongoose";
import express from "express";
import request from "supertest";
import categoryModel from "../models/categoryModel.js";
import {
  createCategoryController,
  updateCategoryController,
  deleteCategoryController,
} from "./categoryController.js";
import dotenv from "dotenv";

dotenv.config();

describe("Category Integration Tests", () => {
  let app;
  let categoryId;

  beforeAll(async () => {
    await mongoose.connect(process.env.MONGO_URI_TEST);
    app = express();
    app.use(express.json());

    // Mount routes once
    app.post("/api/create-category", createCategoryController);
    app.put("/api/update-category/:id", updateCategoryController);
    app.delete("/api/delete-category/:id", deleteCategoryController);
  });

  afterAll(async () => {
    await mongoose.connection.close();
  });

  beforeEach(async () => {
    // Clean DB before each test
    await categoryModel.deleteMany({});
    // Reset a default category for update/delete tests
    const category = await categoryModel.create({ name: "Old", slug: "old" });
    categoryId = category._id;
  });

  // ---------------- Create ----------------
  it("should return 401 if name is missing", async () => {
    const res = await request(app)
      .post("/api/create-category")
      .send({})
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(401);
    expect(res.body.message).toBe("Name is required");
  });

  it("should create a new category", async () => {
    const res = await request(app)
      .post("/api/create-category")
      .send({ name: "Electronics" })
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(201);
    expect(res.body.success).toBe(true);
    expect(res.body.category.name).toBe("Electronics");

    const inDb = await categoryModel.findOne({ name: "Electronics" });
    expect(inDb).not.toBeNull();
  });

  it("should return existing message if category already exists", async () => {
    await categoryModel.create({ name: "Books", slug: "books" });

    const res = await request(app)
      .post("/api/create-category")
      .send({ name: "Books" })
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(200);
    expect(res.body.message).toBe("Category Already Exists");
  });

  // ---------------- Update ----------------
  it("should update the category name and slug", async () => {
    const res = await request(app)
      .put(`/api/update-category/${categoryId}`)
      .send({ name: "NewName" })
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(res.body.category.name).toBe("NewName");
    expect(res.body.category.slug).toBe("newname");

    const inDb = await categoryModel.findById(categoryId);
    expect(inDb.name).toBe("NewName");
  });

  it("should handle invalid ID gracefully", async () => {
    const res = await request(app)
      .put("/api/update-category/invalid-id")
      .send({ name: "X" })
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(500);
    expect(res.body.message).toBe("Error while updating category");
  });

  // ---------------- Delete ----------------
  it("should delete a category successfully", async () => {
    const res = await request(app)
      .delete(`/api/delete-category/${categoryId}`)
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(res.body.message).toBe("Category Deleted Successfully");

    const inDb = await categoryModel.findById(categoryId);
    expect(inDb).toBeNull();
  });

  it("should handle invalid id gracefully", async () => {
    const res = await request(app)
      .delete("/api/delete-category/invalid-id")
      .set("Authorization", "Bearer mockAdminToken");

    expect(res.statusCode).toBe(500);
    expect(res.body.message).toBe("Error while deleting category");
  });
});
